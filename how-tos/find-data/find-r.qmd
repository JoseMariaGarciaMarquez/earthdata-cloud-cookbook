---
title: "How do I find data using R?"
execute:
  eval: false
---

Here are our recommended approaches for finding data with R, from the command line or a notebook.

## Authentication for NASA Earthdata 

An Earthdata Login account is required to access data from the NASA Earthdata
system. Please visit <https://urs.earthdata.nasa.gov> to register and manage
your Earthdata Login account. This account is free to create and only takes a
moment to set up.

Once you have created your Earthdata Login account, you can use the 
[earthdatalogin](https://github.com/boettiger-lab/earthdatalogin/) R package to help you manage your authentication within R.

There is some functionality currently only available in the development version
of earthdatalogin, so we will install it from GitHub using the [pak](https://pak.r-lib.org/) package:

``` r
install.packages("pak")
pak::pak("boettiger-lab/earthdatalogin")
```

The easiest and most portable method of access is using the `netrc` basic
authentication protocol for HTTP. Call `edl_netrc()` to set this up given your
username and password. The easiest way to store your credentials for use in
`edl_netrc()` is to set them as environment variables in your `~/.Renviron` file.
The usethis package has a handy function to find and open this file for editing:

```r
# install.packages("usethis")
usethis::edit_r_environ()
```

Then add the following lines to the file, save the file, and restart R.

```
EARTHDATA_USER="your_user_name"
EARTHDATA_PASSWORD="your_password"
```

Now, when you call `edl_netrc()`, it will consult these environment variables to
create a `.netrc` file that will be used to authenticate with the NASA Earthdata
services. If you don't have your credentials saved as environment variables, 
`earthdatalogin` will provide its own credentials, but you may experience rate 
limits more readily. You can also manually type in your credentials to the `username`
and `password` arguments to `edl_netrc()` but this is not recommended as it 
is too easy to accidentally share these in your code.

```r
library(earthdatalogin)

edl_netrc()
```

Once `edl_netrc()` has been called in your R session, then most spatial 
packages in R can seamlessly access NASA Earthdata over HTTP links.

## Searching for data

The NASA cloud data is searchable programmatically via two methods - NASA's own
search service, and the NASA Spatio-Temporal Asset Catalog (STAC) API. To find
data in R, we'll mainly rely on the
[rstac](https://brazil-data-cube.github.io/rstac/) package. This enables us
interact with the NASA [STAC](https://stacspec.org/en) API to search for our
data, and at the same time learn about STAC more generally. This will be useful
as it is a common standard for distributing spatial data.

We will also search for data using the 
[NASA Earthdata search API](https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html), 
which is the service that powers the 
[Earthdata web search portal](https://search.earthdata.nasa.gov/search?fst0=atmosphere).

For both of these services, the
[earthdatalogin](https://boettiger-lab.github.io/earthdatalogin/) package will
help us get set up and provide a few handy functions to smooth some rough edges.

### rstac

All of the NASA STAC catalogues can be viewed here: 
<https://radiantearth.github.io/stac-browser/#/external/cmr.earthdata.nasa.gov/stac/>.

We will use the rstac package to first browse the collections in the PO DAAC 
catalogue (POCLOUD):

```{r}
## In R
## load R libraries
# install.packages("pak") 
# pak::pak(c("tidyverse", "rstac", "boettiger-lab/earthdatalogin"))

library(rstac)
library(earthdatalogin)

po_collections <- stac("https://cmr.earthdata.nasa.gov/stac/POCLOUD/") |>
  collections() |>
  get_request()

po_collections
```

This only gives us the first 10 collections in the catalogue; to get the rest
we can use the `collections_fetch()` function:

```{r}
all_po_collections <- collections_fetch(po_collections)
all_po_collections

length(all_po_collections$collections)

head(all_po_collections$collections)

sapply(all_po_collections$collections, `[[`, "title")
grep("MUR-JPL", sapply(all_po_collections$collections, `[[`, "id"), value = TRUE)
```

Once we have searched through the collections, we can choose the one we are 
interested in and query it to get the items (granules) we are interested in:

```{r}

start <- "2020-01-01"
end   <- "2020-01-03" 

items <- stac("https://cmr.earthdata.nasa.gov/stac/POCLOUD") |> 
  stac_search(collections = "MUR-JPL-L4-GLOB-v4.1",
              datetime = paste(start,end, sep = "/")) |>
  post_request() |>
  items_fetch()

items
```




```{r}
library(terra)
urls <- edl_search(short_name = "MUR-JPL-L4-GLOB-v4.1",
                   temporal = c(start, end))

terra::rast(paste0("/vsicurl/", urls[1]))

```
