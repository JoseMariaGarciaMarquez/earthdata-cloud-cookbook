---
title: "Find Data: Programmatic Search"
execute:
  eval: false
  echo: fenced
---

## Introduction

We can find data programmatically using the following code.

## Code

Here are our recommended approaches for finding data with code.

::: {.panel-tabset group="language"}
## Python

In Python we can use the [`earthdata`](https://earthdata.readthedocs.io/en/latest/) library (in development and to be renamed `earthaccess` very soon!)

To install the package we'll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a `!`, so it would be `!conda install`.

```{bash}
# Install earthdata
conda install -c conda-forge earthdata
```

This example searches for data from the [Land Processes DAAC](https://lpdaac.usgs.gov/) with a spatial bounding box. 

```{python}
## Import earthdata
from earthdata import DataGranules

# Then we build a Query with spatiotemporal parameters
GranuleQuery = DataGranules().concept_id("C1575731655-LPDAAC_ECS").bounding_box(-134.7,58.9,-133.9,59.2)

# We get the metadata records from CMR, then view the output
granules = GranuleQuery.get()
granules
```


## R

To find data in R, we'll briefly make use of the `earthdata` python package - which we can do from R using the [`reticulate`](https://rstudio.github.io/reticulate/) package and [cheatsheet](https://www.rstudio.com/resources/cheatsheets/). You'll copy these code chunks into your RMarkdown or Quarto document: note that the second code chunk is in Python, but when you run them in sequence you'll be all set.

```{r}
#| message: false
## load reticulate and set up a python environment
library(reticulate) # install.packages("reticulate")
virtualenv_create("earthdata-proj")
py_install("earthdata", envname = "earthdata-proj")
use_virtualenv("earthdata-proj")
```

Now, we'll use the `earthdata` python package

```{python}
## Import earthdata
from earthdata import DataGranules

# Then we build a Query with spatiotemporal parameters
GranuleQuery = DataGranules().concept_id("C1575731655-LPDAAC_ECS").bounding_box(-134.7,58.9,-133.9,59.2)

# We get the metadata records from CMR
granules = GranuleQuery.get()
granules
```

Now we can access the `granules` python object in R using `reticulate`; note the `py$` syntax. We'll create an R object named `granules_r` and view it using `str`. 

```{r}
granules_r <- py$granules
str(granules_r) %>% jsonlite::fromJSON()
```

## Matlab

Matlab code coming soon!

```{bash}
#| echo: true
# Coming soon!
```

## Command Line

With `wget` and `curl`:

```{bash}
# Coming soon!
```


:::
