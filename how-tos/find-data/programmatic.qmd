---
title: "Find Data: Programmatic Search"
execute:
  eval: false
editor_options: 
  chunk_output_type: console
---

## Introduction

We can find data programmatically using the following code.

## Code

Here are our recommended approaches for finding data with code.

::: {.panel-tabset group="language"}
## Python

In Python we can use the [`earthaccess`](https://nsidc.github.io/earthaccess/) library (renamed, previously `earthdata`)

To install the package we'll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a `!`, so it would be `!conda install`.

```{bash, filename="[command line code]"}
# Install earthaccess
conda install -c conda-forge earthaccess
```

This example searches for data from POCLOUD

```{python, import-earthaccess, filename="[python code]"}
## Import earthaccess
import earthaccess

## Access data 
granules = earthaccess.search_data(
  concept_id = "C2036880672-POCLOUD",
  temporal = ("2017-01", "2018-01") # this () syntax means it's a tuple
)
## Granules found: 72 

granules
```


## R

To find data in R, we'll also use the `earthaccess` python package - we can do so from R using the [`reticulate`](https://rstudio.github.io/reticulate/) package ([cheatsheet](https://www.rstudio.com/resources/cheatsheets/)). Note below that we import the python library as an R object we name `earthaccess`, as well as the `earthaccess$` syntax for accessing functions from the `earthaccess` library. The `granules` object has a list of JSON dictionaries with some extra dictionaries. 

```{r, filename="[R code]"}
#| message: false

## load R libraries
library(tidyverse) # install.packages("tidyverse") 
library(reticulate) # install.packages("reticulate")

## load python library
earthaccess <- reticulate::import("earthaccess") 

# use earthaccess to access data # https://nsidc.github.io/earthaccess/tutorials/search-granules/
granules <- earthaccess$search_data(
  concept_id = "C2036880672-POCLOUD",
  temporal = reticulate::tuple("2017-01", "2017-02") # with an earthaccess update, this can be simply c() or list()
)

## Granules found: 72

## exploring
granules # this is the result of the get request. 

class(granules) # "list"
## granules <- reticulate::py_to_r(granules) # Object to convert is not a Python object

```

## Matlab

Matlab code coming soon!

```{bash, filename="[Matlab code]"}
#| echo: true
# Coming soon!
```

## Command Line

With `wget` and `curl`:

```{bash, filename="[command line code]"}
# Coming soon!
```


:::
