{
  "hash": "e3c5be8d972a8b56516689f59f6af197",
  "result": {
    "markdown": "---\ntitle: \"Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example\"\nformat: html\neditor: visual\nexecute: \n  eval: false\n---\n\n\n## Summary\n\nIn this notebook, we will access data for the Harmonized Landsat Sentinel-2 (HLS) Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30m v2.0 (L30) (\\[10.5067/HLS/HLSL30.002\\](https://doi.org/10.5067/HLS/HLSL30.002)) data product. These data are archived and distributed as Cloud Optimized GeoTIFF (COG) files, one file for each spectral band.\n\nWe will access a single COG file, L30 red band (0.64 -- 0.67 μm), from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an `xarray` `dataarray`. This approach leverages S3 native protocols for efficient access to the data.\n\n## Requirements\n\n### 1. AWS instance running in us-west-2\n\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n### 2. Earthdata Login\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n### 3. netrc File\n\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: \\[Authentication for NASA Earthdata\\](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/04_NASA_Earthdata_Authentication.html#authentication-via-netrc-file).\n\n## Learning Objectives\n\n-   how to configure your Python and R work environment to access Cloud Optimized geoTIFF (COG) files\n\n-   how to access HLS COG files\n\n-   how to plot the data\n\n------------------------------------------------------------------------\n\n## Cloud Optimized GeoTIFF (COG)\n\nUsing Harmonized Landsat Sentinel-2 (HLS) version 2.0\n\n#### Import Packages\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nimport os\nfrom osgeo import gdal\nimport rasterio as rio\nimport rioxarray\nimport hvplot.xarray\nimport holoviews as hv\n```\n:::\n\n\n## R\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\nlibrary(rgdal)\nlibrary(raster)\nlibrary(terra)\n```\n:::\n\n:::\n\n## Workspace Environment Setup\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\nFor this exercise, we are going to open up a context manager for the notebook using the rasterio.env module to store the required GDAL configurations we need to access the data from Earthdata Cloud. While the context manager is open (rio_env.\\_\\_enter\\_\\_()) we will be able to run the open or get data commands that would typically be executed within a with statement, thus allowing us to more freely interact with the data. We'll close the context (rio_env.\\_\\_exit\\_\\_()) at the end of the notebook.\n\nGDAL environment variables must be configured to access COGs from Earthdata Cloud. Geospatial data access Python packages like rasterio and rioxarray depend on GDAL, leveraging GDAL's \"Virtual File Systems\" to read remote files. GDAL has a lot of environment variables that control it's behavior. Changing these settings can mean the difference being able to access a file or not. They can also have an impact on the performance.\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nrio_env = rio.Env(GDAL_DISABLE_READDIR_ON_OPEN='TRUE',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n```\n:::\n\n\n## R\n\nSet up rgdal configurations to access the cloud assets that we are interested in. You can learn more about these configuration options here.\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\nsetGDALconfig(c(\"GDAL_HTTP_UNSAFESSL=YES\",\n                \"GDAL_HTTP_COOKIEFILE=.rcookies\",\n                \"GDAL_HTTP_COOKIEJAR=.rcookies\",\n                \"GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR\",\n                \"CPL_VSIL_CURL_ALLOWED_EXTENSIONS=TIF\"))\n```\n:::\n\n:::\n\nIn this example we're interested in the HLS L30 data collection from NASA's LP DAAC in Earthdata Cloud. Below we specify the HTTPS URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nhttps_url = 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'\n```\n:::\n\n\n## R\n\nPlease note that in R, we need to add `/vsicurl/` manually to the COG file URL.\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\nhttps_url <- '/vsicurl/https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'\n```\n:::\n\n:::\n\n## HTTPS Data Access\n\nRead in the HLS HTTPS URL for the L30 red band (0.64 -- 0.67 μm) into our workspace. Note that, accessing files in the cloud requires you to authenticate using your NASA Earthdata Login account meaning a proper netrc file needs to be set up.\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\nwe are using `rioxarray`, an extension of `xarray` used to read geospatial data.\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nda = rioxarray.open_rasterio(https_url)\nda\n```\n:::\n\n\nThe file is read into Python as an `xarray` `dataarray` with a **band**, **x**, and **y** dimension. In this example the **band** dimension is meaningless, so we'll use the `squeeze()` function to remove **band** as a dimension.\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nda_red = da.squeeze('band', drop=True)\nda_red\n```\n:::\n\n\nPlot the `dataarray`, representing the L30 red band, using `hvplot`.\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nda_red.hvplot.image(x='x', y='y', cmap='gray', aspect='equal')\n```\n:::\n\n\nExit the context manager.\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\nrio_env.__exit__()\n```\n:::\n\n\n## R\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\nda_red <- rast(https_url)\nda_red\n```\n:::\n\n\nThe Convert a `SpatRaster` object to a `Raster` object using raster() to be able to use `leaflet` to plot our data.\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\nred_raster <- da_red %>% raster()\nred_raster\n```\n:::\n\n\nThen plot the `red band` using `plot` function.\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\nplot(red_raster)\n```\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}