{
  "hash": "cf21d6bf2a4dae52bf15e72d02edb7d3",
  "result": {
    "markdown": "---\ntitle: \"How do I find data using code?\"\nexecute:\n  eval: false\n---\n\n## Introduction\n\nHere are our recommended approaches for finding data with code, from the command line or a notebook.\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\nIn Python we can use the [`earthaccess`](https://nsidc.github.io/earthaccess/) library (renamed, previously `earthdata`)\n\nTo install the package we'll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a `!`, so it would be `!conda install`.\n\n\n```{bash, filename=\"[command line code]\"}\n# Install earthaccess\nconda install -c conda-forge earthaccess\n```\n\n\nThis example searches for data from the [Land Processes DAAC](https://lpdaac.usgs.gov/) with a spatial bounding box and temporal range.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n## Import packages\nfrom earthaccess import DataGranules, DataCollections\nfrom pprint import pprint \n\n\n# We'll get 4 collections that match with our keyword of interest\ncollections = DataCollections().keyword(\"REFLECTANCE\").cloud_hosted(True).get(4)\n\n# Let's print 2 collections\nfor collection in collections[0:2]:\n    print(pprint(collection.summary()) , collection.abstract(), \"\\n\")\n    \n#Search for files from the second dataset result over a small plot in Nebraska, USA for two weeks in September 2022\ngranules = DataGranules().concept_id(\"C2021957657-LPCLOUD\").temporal(\"2022-09-10\",\"2022-09-24\").bounding_box(-101.67271,41.04754,-101.65344,41.06213)\nprint(len(granules))\ngranules\n```\n:::\n\n\n## R\n\nTo find data in R, we'll also use the `earthaccess` python package - we can do so from R using the [`reticulate`](https://rstudio.github.io/reticulate/) package ([cheatsheet](https://www.rstudio.com/resources/cheatsheets/)). Note below that we import the python library as an R object we name `earthaccess`, as well as the `earthaccess$` syntax for accessing functions from the `earthaccess` library. The `granules` object has a list of JSON dictionaries with some extra dictionaries.\n\n```\n#| message: false\n\n## load R libraries\nlibrary(tidyverse) # install.packages(\"tidyverse\") \nlibrary(reticulate) # install.packages(\"reticulate\")\n\n## load python library\nearthaccess <- reticulate::import(\"earthaccess\") \n\n# use earthaccess to access data # https://nsidc.github.io/earthaccess/tutorials/search-granules/\ngranules <- earthaccess$search_data(\n  doi = \"10.5067/SLREF-CDRV3\",\n  temporal = reticulate::tuple(\"2017-01\", \"2017-02\") # with an earthaccess update, this can be simply c() or list()\n)\n\n## Granules found: 72\n\n## exploring\ngranules # this is the result of the get request. \n\nclass(granules) # \"list\"\n## granules <- reticulate::py_to_r(granules) # Object to convert is not a Python object\n\n```\n\n## Matlab\n\nMatlab code coming soon!\n\n\n```{bash, filename=\"[Matlab code]\"}\n#| echo: true\n# Coming soon!\n```\n\n\n## Command Line\n\nWith `wget` and `curl`:\n\n\n```{bash, filename=\"[command line code]\"}\n# Coming soon!\n```\n\n:::\n\n",
    "supporting": [
      "programmatic_files"
    ],
    "filters": [],
    "includes": {}
  }
}