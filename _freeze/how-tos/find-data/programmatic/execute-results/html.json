{
  "hash": "63ded9fa8ac9c9e1ea8d9732dec25bc4",
  "result": {
    "markdown": "---\ntitle: \"Find Data: Programmatic Search\"\n---\n\n\n## Introduction\n\nWe can find data programmatically using the following code.\n\n## Code\n\nHere are our recommended approaches for finding data with code.\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\nIn Python we can use the [`earthdata`](https://earthdata.readthedocs.io/en/latest/) library (to be renamed `earthaccess` very soon!)\n\nTo install the package we'll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a `!`: `!conda install`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Install earthdata\nconda install -c conda-forge earthdata\n```\n:::\n\n\nThis example searches for data from the LPDAAC with a spatial bounding box. \n\n\n::: {.cell}\n\n```{.python .cell-code}\n## Import earthdata\nfrom earthdata import DataGranules\n\n# Then we build a Query with spatiotemporal parameters\nGranuleQuery = DataGranules().concept_id(\"C1575731655-LPDAAC_ECS\").bounding_box(-134.7,58.9,-133.9,59.2)\n\n# We get the metadata records from CMR\ngranules = GranuleQuery.get()\n```\n:::\n\n\n\n\n\n## R\n\nR code coming soon!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Coming soon!\n```\n:::\n\n\n## Matlab\n\nMatlab code coming soon!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Coming soon!\n```\n:::\n\n\n## Command Line\n\nWith `wget` and `curl`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Coming soon!\n```\n:::\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}