{
  "hash": "42063c9c21aeef3ffa8d50466ed902cf",
  "result": {
    "markdown": "---\ntitle: \"Find Data: Programmatic Search\"\nexecute:\n  eval: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Introduction\n\nWe can find data programmatically using the following code.\n\n## Code\n\nHere are our recommended approaches for finding data with code.\n\n::: {.panel-tabset group=\"language\"}\n## Python\n\nIn Python we can use the [`earthaccess`](https://earthaccess.readthedocs.io/en/latest/) library (renamed, previously `earthdata`)\n\nTo install the package we'll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a `!`, so it would be `!conda install`.\n\n\n::: {.cell filename='[command line code]'}\n\n```{.bash .cell-code}\n# Install earthaccess\nconda install -c conda-forge earthaccess\n```\n:::\n\n\nThis example searches for data from POCLOUD\n\n\n::: {.cell filename='[python code]'}\n\n```{.python .cell-code}\n## Import earthaccess\nimport earthaccess\n\n## Access data \ngranules = earthaccess.search_data(\n  concept_id = \"C2036880672-POCLOUD\",\n  temporal = (\"2017-01\", \"2018-01\") # this () syntax means it's a tuple\n)\n## Granules found: 72 \n\ngranules\n```\n:::\n\n\n\n## R\n\nTo find data in R, we'll also use the `earthaccess` python package - we can do so from R using the [`reticulate`](https://rstudio.github.io/reticulate/) package ([cheatsheet](https://www.rstudio.com/resources/cheatsheets/)). Note below that we import the python library as an R object we name `earthaccess`, as well as the `earthaccess$` syntax for accessing functions from the `earthaccess` library.\n\n\n::: {.cell filename='[R code]'}\n\n```{.r .cell-code}\n## load R libraries\nlibrary(tidyverse) # install.packages(\"tidyverse\") \nlibrary(reticulate) # install.packages(\"reticulate\")\n\n## load python library\nearthaccess <- reticulate::import(\"earthaccess\") \n\n# Then we use earthaccess to build a Query with spatiotemporal parameters # https://nsidc.github.io/earthaccess/tutorials/search-granules/\ngranules <- earthaccess$search_data(\n  concept_id = \"C2036880672-POCLOUD\",\n  temporal = reticulate::tuple(\"2017-01\", \"2018-01\") # with an earthaccess update, this can be simply c() or list()\n)\n\n## Granules found: 72\n\n## exploring\ngranules \nclass(granules) # \"list\"\ngranules <- py_to_r(granules) # Object to convert is not a Python object\n\n## Next steps - \n## str(granules) %>% jsonlite::fromJSON() ## revisit, talk to Bri et al\n```\n:::\n\n\n## Matlab\n\nMatlab code coming soon!\n\n\n::: {.cell filename='[Matlab code]'}\n\n```{.bash .cell-code}\n# Coming soon!\n```\n:::\n\n\n## Command Line\n\nWith `wget` and `curl`:\n\n\n::: {.cell filename='[command line code]'}\n\n```{.bash .cell-code}\n# Coming soon!\n```\n:::\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}