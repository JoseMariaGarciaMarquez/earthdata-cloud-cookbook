{
  "hash": "a6be8bac689b2375f6e16348c1a9109e",
  "result": {
    "markdown": "# CMR and CMR-STAC API\n*Contributed by: TODO: credit where this came from*\n\n---\n# 1. Getting Started <a id=\"getstarted\"></a>\n\n## 1.1 Import Packages <a id=\"1.1\"></a>\n#### Import the required packages and set the input/working directory to run this Jupyter Notebook locally.\n\n::: {.cell}\n``` {.python .cell-code}\nimport requests as r\nfrom skimage import io\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n---\n# 2. Navigating the CMR-STAC API <a id=\"navigatestac\"></a>\n#### Learn about navigating NASA's Common Metadata Repository (CMR) SpatioTemporal Asset Catalog ([STAC](https://stacspec.org/)) API.  \n\n## 2.1 Introduction to the CMR-STAC API <a id=\"2.1\"></a>\n### What is STAC?\n> STAC is a specification that provides a common language for interpreting geospatial information in order to standardize indexing and discovering data. \n### Four STAC Specifications:\n1. [STAC API](https://github.com/radiantearth/stac-api-spec)  \n2. [STAC Catalog](https://github.com/radiantearth/stac-spec/blob/master/catalog-spec/catalog-spec.md)  \n3. [STAC Collection](https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md)  \n4. [STAC Item](https://github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md)  \n#### In the section below, we will walk through an example of each specification. For additional information, check out: https://stacspec.org/. \n\n### 1. STAC API: Endpoint that enables the querying of STAC items.\n#### Below, set the CMR-STAC API Endpoint to a variable, and use the `requests` package to send a GET request to the endpoint, and set the response to a variable.\n\n::: {.cell}\n``` {.python .cell-code}\nstac = 'https://cmr.earthdata.nasa.gov/stac/' # CMR-STAC API Endpoint\nstac_response = r.get(stac).json()            # Call the STAC API endpoint\nfor s in stac_response: print(s)\n```\n\n::: {.cell-output-stdout}\n```\nid\ntitle\nstac_version\ntype\ndescription\nlinks\n```\n:::\n:::\n\n\n::: {.cell}\n``` {.python .cell-code}\nprint(f\"You are now using the {stac_response['id']} API (STAC Version: {stac_response['stac_version']}). {stac_response['description']}\")\nprint(f\"There are {len(stac_response['links'])} STAC catalogs available in CMR.\")\n```\n\n::: {.cell-output-stdout}\n```\nYou are now using the stac API (STAC Version: 1.0.0). This is the landing page for CMR-STAC. Each provider link contains a STAC endpoint.\nThere are 46 STAC catalogs available in CMR.\n```\n:::\n:::\n\n\n#### You will notice above that the CMR-STAC API contains many different endpoints--not just from NASA LP DAAC, but also contains endpoints for other NASA ESDIS DAACs.\n### 2. STAC Catalog: Contains a JSON file of links that organize all of the collections available. \n#### Below, search for LP DAAC Catalogs, and print the information contained in the Catalog that we will be using today, `LPCLOUD`.\n\n::: {.cell}\n``` {.python .cell-code}\nstac_lp = [s for s in stac_response['links'] if 'LP' in s['title']]  # Search for only LP-specific catalogs\n\n# LPCLOUD is the STAC catalog we will be using and exploring today\nlp_cloud = r.get([s for s in stac_lp if s['title'] == 'LPCLOUD'][0]['href']).json()\nfor l in lp_cloud: print(f\"{l}: {lp_cloud[l]}\")\n```\n\n::: {.cell-output-stdout}\n```\nid: LPCLOUD\ntitle: LPCLOUD\ndescription: Root catalog for LPCLOUD\ntype: Catalog\nstac_version: 1.0.0\nlinks: [{'rel': 'self', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD', 'title': 'Provider catalog', 'type': 'application/json'}, {'rel': 'root', 'href': 'https://cmr.earthdata.nasa.gov/stac/', 'title': 'Root catalog', 'type': 'application/json'}, {'rel': 'collections', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections', 'title': 'Provider Collections', 'type': 'application/json'}, {'rel': 'search', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/search', 'title': 'Provider Item Search', 'type': 'application/geo+json', 'method': 'GET'}, {'rel': 'search', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/search', 'title': 'Provider Item Search', 'type': 'application/geo+json', 'method': 'POST'}, {'rel': 'conformance', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/conformance', 'title': 'Conformance Classes', 'type': 'application/geo+json'}, {'rel': 'service-desc', 'href': 'https://api.stacspec.org/v1.0.0-beta.1/openapi.yaml', 'title': 'OpenAPI Doc', 'type': 'application/vnd.oai.openapi+json;version=3.0'}, {'rel': 'service-doc', 'href': 'https://api.stacspec.org/v1.0.0-beta.1/index.html', 'title': 'HTML documentation', 'type': 'text/html'}, {'rel': 'child', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003', 'type': 'application/json'}, {'rel': 'child', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v1.5', 'type': 'application/json'}, {'rel': 'child', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSS30.v1.5', 'type': 'application/json'}]\nconformsTo: ['https://api.stacspec.org/v1.0.0-beta.1/core', 'https://api.stacspec.org/v1.0.0-beta.1/item-search', 'https://api.stacspec.org/v1.0.0-beta.1/item-search#fields', 'https://api.stacspec.org/v1.0.0-beta.1/item-search#query', 'https://api.stacspec.org/v1.0.0-beta.1/item-search#sort', 'https://api.stacspec.org/v1.0.0-beta.1/item-search#context', 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core', 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30', 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson']\n```\n:::\n:::\n\n\n#### Below, print the links contained in the LP CLOUD STAC Catalog:\n\n::: {.cell}\n``` {.python .cell-code}\nlp_links = lp_cloud['links']\nfor l in lp_links: \n    try: \n        print(f\"{l['href']} is the {l['title']}\")\n    except:\n        print(f\"{l['href']}\")       \n```\n\n::: {.cell-output-stdout}\n```\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD is the Provider catalog\nhttps://cmr.earthdata.nasa.gov/stac/ is the Root catalog\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections is the Provider Collections\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/search is the Provider Item Search\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/search is the Provider Item Search\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/conformance is the Conformance Classes\nhttps://api.stacspec.org/v1.0.0-beta.1/openapi.yaml is the OpenAPI Doc\nhttps://api.stacspec.org/v1.0.0-beta.1/index.html is the HTML documentation\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v1.5\nhttps://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSS30.v1.5\n```\n:::\n:::\n\n\n### 3. STAC Collection: Extension of STAC Catalog containing additional information that describe the STAC Items in that Collection.\n#### Below, get a response from the LPCLOUD Collection and print the information included in the response.\n\n::: {.cell}\n``` {.python .cell-code}\nlp_collections = [l['href'] for l in lp_links if l['rel'] == 'collections'][0]  # Set collections endpoint to variable\ncollections_response = r.get(f\"{lp_collections}\").json()                        # Call collections endpoint\nprint(f\"This collection contains {collections_response['description']} ({len(collections_response['collections'])} available)\")\n```\n\n::: {.cell-output-stdout}\n```\nThis collection contains All collections provided by LPCLOUD (3 available)\n```\n:::\n:::\n\n\n#### As of March 3, 2021, there are three collections available, and more will be added in the future. \n#### Print out one of the collections:\n\n::: {.cell}\n``` {.python .cell-code}\ncollections = collections_response['collections']\ncollections[1]\n```\n\n::: {.cell-output-display}\n{'id': 'HLSL30.v1.5',\n 'stac_version': '1.0.0',\n 'license': 'not-provided',\n 'title': 'HLS Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30 m V1.5',\n 'type': 'Collection',\n 'description': 'PROVISIONAL - The Harmonized Landsat and Sentinel-2 (HLS) project provides consistent surface reflectance (SR) and top of atmosphere (TOA) brightness data from the Operational Land Imager (OLI) aboard the joint NASA/USGS Landsat 8 satellite and the Multi-Spectral Instrument (MSI) aboard Europe’s Copernicus Sentinel-2A and Sentinel-2B satellites. The combined measurement enables global observations of the land every 2–3 days at 30-meter (m) spatial resolution. The HLS project uses a set of algorithms to obtain seamless products from OLI and MSI that include atmospheric correction, cloud and cloud-shadow masking, spatial co-registration and common gridding, illumination and view angle normalization, and spectral bandpass adjustment. \\r\\n\\r\\nThe HLSL30 product provides 30-m Nadir Bidirectional Reflectance Distribution Function (BRDF)-Adjusted Reflectance (NBAR) and is derived from Landsat 8 OLI data products. The  HLSS30 (https://doi.org/10.5067/HLS/HLSS30.015) and HLSL30 products are gridded to the same resolution and Military Grid Reference System (MGRS) (https://hls.gsfc.nasa.gov/products-description/tiling-system/) tiling system, and thus are “stackable” for time series analysis.\\r\\n\\r\\nThe HLSL30 product is provided in Cloud Optimized GeoTIFF (COG) format, and each band is distributed as a separate file. There are 10 bands included in the HLSL30 product along with one quality assessment (QA) band and four angle bands. For a more detailed description of the individual bands provided in the HLSL30 product, please see the User Guide (https://lpdaac.usgs.gov/documents/878/HLS_User_Guide_V15_provisional.pdf).\\r\\n\\r\\n',\n 'links': [{'rel': 'self',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v1.5',\n   'title': 'Info about this collection',\n   'type': 'application/json'},\n  {'rel': 'root',\n   'href': 'https://cmr.earthdata.nasa.gov/stac',\n   'title': 'Root catalog',\n   'type': 'application/json'},\n  {'rel': 'parent',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD',\n   'title': 'Parent catalog',\n   'type': 'application/json'},\n  {'rel': 'items',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v1.5/items',\n   'title': 'Granules in this collection',\n   'type': 'application/json'},\n  {'rel': 'about',\n   'href': 'https://cmr.earthdata.nasa.gov/search/concepts/C1711972753-LPCLOUD.html',\n   'title': 'HTML metadata for collection',\n   'type': 'text/html'},\n  {'rel': 'via',\n   'href': 'https://cmr.earthdata.nasa.gov/search/concepts/C1711972753-LPCLOUD.json',\n   'title': 'CMR JSON metadata for collection',\n   'type': 'application/json'}],\n 'extent': {'crs': 'http://www.opengis.net/def/crs/OGC/1.3/CRS84',\n  'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'trs': 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian',\n  'temporal': {'interval': [['2013-04-11T00:00:00.000Z', None]]}}}\n:::\n:::\n\n\n#### In CMR, `id` is used to query by a specific product, so be sure to save the ID for the HLS S30 and L30 V1.5 products below:\n\n::: {.cell}\n``` {.python .cell-code}\n# Search available collections for HLS and print them out\nhls_collections = [c for c in collections if 'HLS' in c['title']]\nfor h in hls_collections: print(f\"{h['title']} has an ID (shortname) of: {h['id']}\")\n```\n\n::: {.cell-output-stdout}\n```\nHLS Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30 m V1.5 has an ID (shortname) of: HLSL30.v1.5\nHLS Sentinel-2 Multi-spectral Instrument Surface Reflectance Daily Global 30 m V1.5 has an ID (shortname) of: HLSS30.v1.5\n```\n:::\n:::\n\n\n> #### Note that the \"id\" shortname is in the format: productshortname.vVVV (where VVV = product version)\n\n#### Explore the attributes contained in the HLSS30 Collection.\n\n::: {.cell}\n``` {.python .cell-code}\ns30 = [h for h in hls_collections if h['id'] == 'HLSS30.v1.5'][0]  # Grab HLSS30 collection\nfor s in s30['extent']: print(f\"{s}: {s30['extent'][s]}\")          # Check out the extent of this collection\n```\n\n::: {.cell-output-stdout}\n```\ncrs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\nspatial: {'bbox': [[-180, -90, 180, 90]]}\ntrs: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\ntemporal: {'interval': [['2014-04-03T00:00:00.000Z', None]]}\n```\n:::\n:::\n\n\n#### So here we can see that the extent is global, and can also see the temporal range--where \"None\" means on-going or to present.\n\n::: {.cell}\n``` {.python .cell-code}\nprint(f\"HLS S30 Start Date is: {s30['extent']['temporal']['interval'][0][0]}\")\ns30_id = s30['id']\n```\n\n::: {.cell-output-stdout}\n```\nHLS S30 Start Date is: 2014-04-03T00:00:00.000Z\n```\n:::\n:::\n\n\n#### Next, explore the attributes of the HLSL30 collection.\n\n::: {.cell}\n``` {.python .cell-code}\nl30 = [h for h in hls_collections if h['id'] == 'HLSL30.v1.5'][0]     # Grab HLSL30 collection\nfor l in l30['extent']: print(f\"{l}: {l30['extent'][l]}\")             # Check out the extent of this collection\nprint(f\"HLS L30 Start Date is: {l30['extent']['temporal']['interval'][0][0]}\")\nl30_id = l30['id']\n```\n\n::: {.cell-output-stdout}\n```\ncrs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\nspatial: {'bbox': [[-180, -90, 180, 90]]}\ntrs: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\ntemporal: {'interval': [['2013-04-11T00:00:00.000Z', None]]}\nHLS L30 Start Date is: 2013-04-11T00:00:00.000Z\n```\n:::\n:::\n\n\n#### Above, notice that the L30 product has a different start date than the S30 product. \n\n### 4. STAC Item: Represents data and metadata assets that are spatiotemporally coincident\n#### Below, query the HLSS30 collection for items and return the first item in the collection. \n\n::: {.cell}\n``` {.python .cell-code}\n# Below, go through all links in the collection and return the link containing the items endpoint\ns30_items = [s['href'] for s in s30['links'] if s['rel'] == 'items'][0]  # Set items endpoint to variable\ns30_items\n```\n\n::: {.cell-output-display}\n'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSS30.v1.5/items'\n:::\n:::\n\n\n::: {.cell}\n``` {.python .cell-code}\ns30_items_response = r.get(f\"{s30_items}\").json()                        # Call items endpoint\ns30_item = s30_items_response['features'][0]                             # select first item (10 items returned by default)\ns30_item\n```\n\n::: {.cell-output-display}\n{'type': 'Feature',\n 'id': 'G1969487860-LPCLOUD',\n 'stac_version': '1.0.0',\n 'stac_extensions': ['https://stac-extensions.github.io/eo/v1.0.0/schema.json'],\n 'collection': 'HLSS30.v1.5',\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-119.1488671, 33.3327671],\n    [-118.9832795, 33.3355226],\n    [-118.6783731, 34.3301598],\n    [-119.1737801, 34.3223655],\n    [-119.1488671, 33.3327671]]]},\n 'bbox': [-119.17378, 33.332767, -118.678373, 34.33016],\n 'links': [{'rel': 'self',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSS30.v1.5/items/G1969487860-LPCLOUD'},\n  {'rel': 'parent',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSS30.v1.5'},\n  {'rel': 'collection',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSS30.v1.5'},\n  {'rel': 'root', 'href': 'https://cmr.earthdata.nasa.gov/stac/'},\n  {'rel': 'provider', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD'},\n  {'rel': 'via',\n   'href': 'https://cmr.earthdata.nasa.gov/search/concepts/G1969487860-LPCLOUD.json'},\n  {'rel': 'via',\n   'href': 'https://cmr.earthdata.nasa.gov/search/concepts/G1969487860-LPCLOUD.umm_json'}],\n 'properties': {'datetime': '2015-08-26T18:54:35.450Z',\n  'start_datetime': '2015-08-26T18:54:35.450Z',\n  'end_datetime': '2015-08-26T18:54:35.450Z',\n  'eo:cloud_cover': 6},\n 'assets': {'VZA': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.VZA.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.VZA.tif'},\n  'VAA': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.VAA.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.VAA.tif'},\n  'SAA': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.SAA.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.SAA.tif'},\n  'B11': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B11.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B11.tif'},\n  'B02': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B02.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B02.tif'},\n  'B09': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B09.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B09.tif'},\n  'B12': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B12.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B12.tif'},\n  'B03': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B03.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B03.tif'},\n  'B01': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B01.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B01.tif'},\n  'B07': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B07.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B07.tif'},\n  'SZA': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.SZA.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.SZA.tif'},\n  'B05': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B05.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B05.tif'},\n  'B06': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B06.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B06.tif'},\n  'Fmask': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.Fmask.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.Fmask.tif'},\n  'B10': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B10.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B10.tif'},\n  'B08': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B08.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B08.tif'},\n  'B8A': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B8A.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B8A.tif'},\n  'B04': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.B04.tif',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-protected/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.B04.tif'},\n  'browse': {'title': 'Download HLS.S30.T11SLT.2015238T185436.v1.5.jpg',\n   'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-public/HLSS30.015/HLS.S30.T11SLT.2015238T185436.v1.5.jpg',\n   'type': 'image/jpeg'},\n  'metadata': {'href': 'https://cmr.earthdata.nasa.gov/search/concepts/G1969487860-LPCLOUD.xml',\n   'type': 'application/xml'}}}\n:::\n:::\n\n\n#### STAC metadata provides valuable information on the item, including a unique ID, when it was acquired, the location of the observation, and a cloud cover assessment.  \n\n::: {.cell}\n``` {.python .cell-code}\n# Print metadata attributes from this observation\nprint(f\"The ID for this item is: {s30_item['id']}\")\nprint(f\"It was acquired on: {s30_item['properties']['datetime']}\")\nprint(f\"over: {s30_item['bbox']} (Lower Left, Upper Right corner coordinates)\")\nprint(f\"It contains {len(s30_item['assets'])} assets\")\nprint(f\"and is {s30_item['properties']['eo:cloud_cover']}% cloudy.\")\n```\n\n::: {.cell-output-stdout}\n```\nThe ID for this item is: G1969487860-LPCLOUD\nIt was acquired on: 2015-08-26T18:54:35.450Z\nover: [-119.17378, 33.332767, -118.678373, 34.33016] (Lower Left, Upper Right corner coordinates)\nIt contains 20 assets\nand is 6% cloudy.\n```\n:::\n:::\n\n\n#### Below, print out the ten items and the percent cloud cover--we will use this to decide which item to visualize in the next section. \n\n::: {.cell}\n``` {.python .cell-code}\nfor i, s in enumerate(s30_items_response['features']):\n    print(f\"Item at index {i} is {s['properties']['eo:cloud_cover']}% cloudy.\")\n```\n\n::: {.cell-output-stdout}\n```\nItem at index 0 is 6% cloudy.\nItem at index 1 is 4% cloudy.\nItem at index 2 is 0% cloudy.\nItem at index 3 is 64% cloudy.\nItem at index 4 is 0% cloudy.\nItem at index 5 is 39% cloudy.\nItem at index 6 is 74% cloudy.\nItem at index 7 is 100% cloudy.\nItem at index 8 is 30% cloudy.\nItem at index 9 is 67% cloudy.\n```\n:::\n:::\n\n\n#### Using the information printed above, set the `item_index` below to whichever observation is the least cloudy above.\n\n::: {.cell}\n``` {.python .cell-code}\nitem_index = 9  # Indexing starts at 0 in Python, so here select the eighth item in the list at index 7\n```\n:::\n\n\n::: {.cell}\n``` {.python .cell-code}\ns30_item = s30_items_response['features'][item_index]  # Grab the next item in the list\n\nprint(f\"The ID for this item is: {s30_item['id']}\")\nprint(f\"It was acquired on: {s30_item['properties']['datetime']}\")\nprint(f\"over: {s30_item['bbox']} (Lower Left, Upper Right corner coordinates)\")\nprint(f\"It contains {len(s30_item['assets'])} assets\")\nprint(f\"and is {s30_item['properties']['eo:cloud_cover']}% cloudy.\")\n```\n\n::: {.cell-output-stdout}\n```\nThe ID for this item is: G2010287698-LPCLOUD\nIt was acquired on: 2016-11-06T08:21:39.880Z\nover: [24.875464, -26.295042, 25.108568, -25.427554] (Lower Left, Upper Right corner coordinates)\nIt contains 20 assets\nand is 67% cloudy.\n```\n:::\n:::\n\n\n#### Below, print out the names of all of the assets included in this item.\n\n::: {.cell}\n``` {.python .cell-code}\nprint(\"The following assets are available for download:\")\nfor a in s30_item['assets']: print(a)\n```\n\n::: {.cell-output-stdout}\n```\nThe following assets are available for download:\nSZA\nB01\nVAA\nSAA\nB10\nB8A\nB05\nB09\nFmask\nB02\nB12\nB11\nB03\nB06\nB04\nB08\nVZA\nB07\nbrowse\nmetadata\n```\n:::\n:::\n\n\n#### Notice that each HLS item includes a browse image. Read the browse file into memory and visualize the HLS acquisition.\n\n::: {.cell}\n``` {.python .cell-code}\ns30_item['assets']['browse']\n```\n\n::: {.cell-output-display}\n{'title': 'Download HLS.S30.T35JKM.2016311T080122.v1.5.jpg',\n 'href': 'https://lpdaac.earthdata.nasa.gov/lp-prod-public/HLSS30.015/HLS.S30.T35JKM.2016311T080122.v1.5.jpg',\n 'type': 'image/jpeg'}\n:::\n:::\n\n\n#### Use the `skimage` package to load the browse image into memory and `matplotlib` to quickly visualize it.\n\n::: {.cell}\n``` {.python .cell-code}\nimage = io.imread(s30_item['assets']['browse']['href'])  # Load jpg browse image into memory\n\n# Basic plot of the image\nplt.figure(figsize=(10,10))              \nplt.imshow(image)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](Navigate_CMR_STAC_files/figure-html/cell-21-output-1.png){width=779 height=771}\n:::\n:::\n\n\n#### Congrats! You have visualized your first Cloud-Native HLS asset!\n\n",
    "supporting": [
      "Navigate_CMR_STAC_files"
    ],
    "filters": [],
    "dependencies": {
      "type": "includes",
      "data": {}
    }
  }
}